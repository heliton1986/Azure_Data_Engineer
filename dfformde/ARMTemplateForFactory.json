{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Nome do Data Factory",
			"defaultValue": "dfformde"
		},
		"AzureDataLakeMoviesDataLake_accountKey": {
			"type": "secureString",
			"metadata": "Cadeia de caracteres segura para 'accountKey' de 'AzureDataLakeMoviesDataLake'"
		},
		"SqlServerMovies_connectionString": {
			"type": "secureString",
			"metadata": "Cadeia de caracteres segura para 'connectionString' de 'SqlServerMovies'"
		},
		"AzureDataLakeMoviesDataLake_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://formacaodataengineer.dfs.core.windows.net"
		},
		"HttpServerMovies_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://raw.githubusercontent.com/cacaviana/DataFactory/main/moviesDB.csv"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/copyMovies')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "CopyData",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "HttpReadSettings",
									"requestMethod": "GET"
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "SqlServerSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"type": "String",
											"ordinal": 1
										},
										"sink": {
											"name": "Movies",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 3
										},
										"sink": {
											"name": "genres",
											"type": "String",
											"physicalType": "varchar"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "datasetMovies",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "datasetTableMovies",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "formacaoEngDadosDataFactory"
				},
				"annotations": [],
				"lastPublishTime": "2022-04-17T15:40:06Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/datasetMovies')]",
				"[concat(variables('factoryId'), '/datasets/datasetTableMovies')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataFlow')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "dataFlowMoviesBD",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dataFlowMoviesBD",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"Origem": {},
									"Final": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "pipelineDataflow"
				},
				"annotations": [],
				"lastPublishTime": "2022-04-21T19:46:43Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/dataFlowMoviesBD')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/datasetMovies')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "HttpServerMovies",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "formacaoEngDadosDataFactory"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "HttpServerLocation"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/HttpServerMovies')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/datasetMoviesDL')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeMoviesDataLake",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "MoviesDataLake"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "moviesDB.csv",
						"folderPath": "RAW",
						"fileSystem": "disco1"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "movie",
						"type": "String"
					},
					{
						"name": "title",
						"type": "String"
					},
					{
						"name": "genres",
						"type": "String"
					},
					{
						"name": "year",
						"type": "String"
					},
					{
						"name": "Rating",
						"type": "String"
					},
					{
						"name": "Rotton Tomato",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeMoviesDataLake')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/datasetMoviesDLFinal')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeMoviesDataLake",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "MoviesDataLake"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "TRATADOS",
						"fileSystem": "disco1"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeMoviesDataLake')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/datasetTableMovies')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SqlServerMovies",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "formacaoEngDadosDataFactory"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [
					{
						"name": "Movies",
						"type": "varchar"
					},
					{
						"name": "Title",
						"type": "varchar"
					},
					{
						"name": "genres",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "tblMovies"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SqlServerMovies')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureDataLakeMoviesDataLake')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('AzureDataLakeMoviesDataLake_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('AzureDataLakeMoviesDataLake_accountKey')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/HttpServerMovies')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "HttpServer",
				"typeProperties": {
					"url": "[parameters('HttpServerMovies_properties_typeProperties_url')]",
					"enableServerCertificateValidation": true,
					"authenticationType": "Anonymous"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/SqlServerMovies')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "SqlServer",
				"typeProperties": {
					"connectionString": "[parameters('SqlServerMovies_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataFlowMoviesBD')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "transfMoviesBD"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "datasetMoviesDL",
								"type": "DatasetReference"
							},
							"name": "Origem"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "datasetMoviesDLFinal",
								"type": "DatasetReference"
							},
							"name": "Final"
						}
					],
					"transformations": [
						{
							"name": "selectCorrecaoNome"
						},
						{
							"name": "AnoAcima1950"
						},
						{
							"name": "derivedGenre"
						},
						{
							"name": "RankingMovies"
						},
						{
							"name": "aggregateRatings"
						}
					],
					"scriptLines": [
						"source(output(",
						"          movie as string,",
						"          title as string,",
						"          genres as string,",
						"          year as string,",
						"          Rating as string,",
						"          {Rotton Tomato} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Origem",
						"Origem select(mapColumn(",
						"          movie,",
						"          title,",
						"          genres,",
						"          year,",
						"          Rating,",
						"          {Rotten Tomato} = {Rotton Tomato}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectCorrecaoNome",
						"selectCorrecaoNome filter(toInteger(year) > 1950) ~> AnoAcima1950",
						"AnoAcima1950 derive(PrimaryGenre = iif(locate('|', genres) > 1, left(genres, locate('|', genres) - 1), genres)) ~> derivedGenre",
						"derivedGenre window(over(PrimaryGenre,",
						"          year),",
						"     asc({Rotten Tomato}, true),",
						"     RatingsRank = rank()) ~> RankingMovies",
						"RankingMovies aggregate(groupBy(PrimaryGenre,",
						"          year),",
						"     AverageRating = avg(toInteger({Rotten Tomato})),",
						"          HighestRated = first(title),",
						"          LowerRated = last(title),",
						"          NumberOfMovies = count()) ~> aggregateRatings",
						"aggregateRatings sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Column_1 as string,",
						"          Column_2 as string,",
						"          Column_3 as string,",
						"          Column_4 as string,",
						"          Column_5 as string,",
						"          Column_6 as string",
						"     ),",
						"     partitionFileNames:['testandoFinal100.csv'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> Final"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/datasetMoviesDL')]",
				"[concat(variables('factoryId'), '/datasets/datasetMoviesDLFinal')]"
			]
		}
	]
}